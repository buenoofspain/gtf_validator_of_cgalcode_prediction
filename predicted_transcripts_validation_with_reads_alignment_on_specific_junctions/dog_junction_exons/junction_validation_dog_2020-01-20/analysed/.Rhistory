}
p <- ggplot(data = transcript_num_table_gather_entrez, aes(as.numeric(count))) +
geom_histogram(fill = "deepskyblue4") +
my_theme() +
labs(title = "Histogram of number of transcripts per gene (Entrez ID)",
x = "Number of transcripts per gene", y = "Count") +
facet_wrap(DB ~ group, scales = "free", ncol = 2)
ann_text_entrez <- data.frame(x = c(20, 300, 20, 100, 20, 100),
y = c(4000, 350, 40000, 15, 5000, 280),
group = rep(c("low", "high"), 3),
DB = rep(c("EnsDb", "orgDb", "TxDb"), each = 2),
labs = c(paste(length(which(transcript_num_table_gather_entrez$group ==  "low" &
transcript_num_table_gather_entrez$DB ==  "EnsDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "high" &
transcript_num_table_gather_entrez$DB ==  "EnsDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "low" &
transcript_num_table_gather_entrez$DB ==  "orgDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "high" &
transcript_num_table_gather_entrez$DB ==  "orgDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "low" &
transcript_num_table_gather_entrez$DB ==  "TxDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "high" &
transcript_num_table_gather_entrez$DB ==  "TxDb")))))
p + geom_text(data = ann_text_entrez, aes(x, y, label = labs, group = NULL), size = 8)
# merging datasets by Ensembl ID
transcript_num_table_ensembl <- full_join(org_transcript_num_table_ensembl, EnsDb_transcript_num_table_ensembl, by = "Ensembl")
# gather for plotting
transcript_num_table_gather_ensembl <- transcript_num_table_ensembl %>%
gather(DB, count, orgDb:EnsDb)
# How many counts are NA?
sapply(transcript_num_table_gather_ensembl, function(x) sum(is.na(x)))
# removing rows with NA counts
transcript_num_table_gather_ensembl <- transcript_num_table_gather_ensembl[!is.na(transcript_num_table_gather_ensembl$count), ]
# because there are only a handful of genes with many transcripts, they can't be plotted together with genes with few transcripts
# separating them in high and low
transcript_num_table_gather_ensembl$group <- ifelse(transcript_num_table_gather_ensembl$count > 25, "high", "low")
# setting factor levels
f = c("low", "high")
transcript_num_table_gather_ensembl <- within(transcript_num_table_gather_ensembl, group <- factor(group, levels = f))
p <- ggplot(data = transcript_num_table_gather_ensembl, aes(as.numeric(count))) +
geom_histogram(fill = "deepskyblue4") +
my_theme() +
labs(title = "Histogram of number of transcripts per gene (Ensembl ID)",
x = "Number of transcripts per gene", y = "Count") +
facet_wrap(DB ~ group, scales = "free", ncol = 2)
ann_text_ensembl <- data.frame(x = c(10, 75, 10, 100),
y = c(30000, 100, 15000, 100),
group = rep(c("low", "high"), 4),
DB = rep(c("EnsDb", "orgDb"), each = 2),
labs = c(paste(length(which(transcript_num_table_gather_ensembl$group ==  "low" &
transcript_num_table_gather_ensembl$DB ==  "EnsDb"))),
paste(length(which(transcript_num_table_gather_ensembl$group ==  "high" &
transcript_num_table_gather_ensembl$DB ==  "EnsDb"))),
paste(length(which(transcript_num_table_gather_ensembl$group ==  "low" &
transcript_num_table_gather_ensembl$DB ==  "orgDb"))),
paste(length(which(transcript_num_table_gather_ensembl$group ==  "high" &
transcript_num_table_gather_ensembl$DB ==  "orgDb")))))
p + geom_text(data = ann_text_ensembl, aes(x, y, label = labs, group = NULL), size = 8)
# for comparison replacing NAs with 0
transcript_num_table_ensembl_NAtozero <- transcript_num_table_ensembl
transcript_num_table_ensembl_NAtozero[is.na(transcript_num_table_ensembl_NAtozero)] <- 0
transcript_num_table_entrez_NAtozero <- transcript_num_table_entrez
transcript_num_table_entrez_NAtozero[is.na(transcript_num_table_entrez_NAtozero)] <- 0
library(ggrepel)
p1 <- ggplot(transcript_num_table_ensembl_NAtozero, aes(x = orgDb, y = EnsDb)) +
geom_abline(linetype="dashed") +
geom_point(colour = "deepskyblue4", alpha = 0.3) +
my_theme() +
geom_smooth(size = 1, color = "black") +            # Add a loess smoothed fit curve with confidence region
labs(title = "Number of transcripts per Ensembl ID") +
geom_text_repel(data = subset(transcript_num_table_ensembl_NAtozero, orgDb > 140 | EnsDb > 150), aes(label = Ensembl))
p2 <- ggplot(transcript_num_table_entrez_NAtozero, aes(x = orgDb, y = TxDb)) +
geom_abline(linetype="dashed") +
geom_point(colour = "deepskyblue4", alpha = 0.3) +
my_theme() +
geom_smooth(size = 1, color = "black") +
labs(title = "Number of transcripts per Entrez ID") +
geom_text_repel(data = subset(transcript_num_table_entrez_NAtozero, orgDb > 100 | TxDb > 200), aes(label = Entrez))
p3 <- ggplot(transcript_num_table_entrez_NAtozero, aes(x = orgDb, y = EnsDb)) +
geom_abline(linetype="dashed") +
geom_point(colour = "deepskyblue4", alpha = 0.3) +
my_theme() +
geom_smooth(size = 1, color = "black") +
labs(title = "Number of transcripts per Entrez ID") +
geom_text_repel(data = subset(transcript_num_table_entrez_NAtozero, orgDb > 100 | EnsDb > 900), aes(label = Entrez))
p4 <- ggplot(transcript_num_table_entrez_NAtozero, aes(x = TxDb, y = EnsDb)) +
geom_abline(linetype="dashed") +
geom_point(colour = "deepskyblue4", alpha = 0.3) +
my_theme() +
geom_smooth(size = 1, color = "black") +
labs(title = "Number of transcripts per Entrez ID") +
geom_text_repel(data = subset(transcript_num_table_entrez_NAtozero, TxDb > 150 | EnsDb > 900), aes(label = Entrez))
library(gridExtra)
library(grid)
library(gridExtra)
library(grid)
install.packages("prettyR")
install.packages('IRkernel',dep=TRUE)
IRkernel::installspec()  # to register the kernel in the current R installation
install.packages("IRkernel", dep = TRUE)
install.packages("IRkernel", dep = TRUE)
install.packages("IRkernel", dep = TRUE)
install.packages('IRkernel',dep=TRUE)
IRkernel::installspec()  # to register the kernel in the current R installation
install.packages('devtools',dep=TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
2+2
x
x=1
x
x = x+10
x
x = x+10
x
x = x+10
x
x = x+10
x
x = x+10
x
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
x=1
x
x = x+10
x
x = x+10
x
hist(rnorm(1000))
hist(rnorm(100, mean = 2, sd = .2))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
x=1
x
x = x+10
x
hist(rnorm(1000))
hist(rnorm(100, mean = 2, sd = .2))
---
title: "Mon premier document"
output:
html_document: default
pdf_document: default
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## Ma propre section
```{r}
2+2
x=1
x
```
```{r}
x = x+10
x
```
```{r}
hist(rnorm(1000))
```
```{r}
hist(rnorm(100, mean = 2, sd = .2))
```
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
x=1
x
x = x+10
x
hist(rnorm(1000))
hist(rnorm(100, mean = 2, sd = .2))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
x=1
x
x = x+10
x
hist(rnorm(1000))
hist(rnorm(100, mean = 2, sd = .2))
unlink('Documents/these_nguillaudeux/Archives_docs/Formations/MOOC_reproductibilite/mooc-rr/module2/docu1_cache', recursive = TRUE)
# Install core Bioconductor packages
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
# install biomartr 0.8.0
install.packages("biomartr", dependencies = TRUE)
# Install core Bioconductor packages
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
# Install package dependencies
BiocManager::install("Biostrings", version = "3.8")
BiocManager::install("biomaRt", version = "3.8")
BiocManager::install("biomaRt", version = "3.8")
data_url = "https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/HistData/Wheat.csv"
data_url
data_url = "https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/HistData/Wheat.csv"
data_url = read.csv('/home/niguilla/Documents/these_nguillaudeux/Archives_docs/Formations/MOOC_reproductibilite/mooc-rr/mooc-rr/module3/eval_pairs/Wheat.csv')
data_url = read.csv('/home/niguilla/Documents/these_nguillaudeux/Archives_docs/Formations/MOOC_reproductibilite/mooc-rr/mooc-rr/eval_pairs/Wheat.csv')
data_url
Wheat = read.csv('/home/niguilla/Documents/these_nguillaudeux/Archives_docs/Formations/MOOC_reproductibilite/mooc-rr/mooc-rr/eval_pairs/Wheat.csv')
Wheat
data(Wheat)
# convenience function to fill area under a curve down to a minimum value
fillpoly <- function(x,y, low=min(y),  ...) {
n <- length(x)
polygon( c(x, x[n], x[1]), c(y, low, low), ...)
}
# For best results, this graph should be viewed with width ~ 2 * height
# Note use of type='s' to plot a step function for Wheat
#   and panel.first to provide a background grid()
#     The curve for Wages is plotted after the polygon below it is filled
with(Wheat, {
plot(Year, Wheat, type="s", ylim=c(0,105),
ylab="Price of the Quarter of Wheat (shillings)",
panel.first=grid(col=gray(.9), lty=1))
fillpoly(Year, Wages, low=0, col="lightskyblue", border=NA)
lines(Year, Wages, lwd=3, col="red")
})
# Lecture du tableau de l'ensemble des blocs d'exons
data <- read.table("nb_reads_mapped_tissue.csv", header = TRUE, sep = "\t", dec=',')
head(data)
summary(data)
data[1]
length(data)
cbind(data, total = rowSums(data[2:16]))
hist(data[2:16])
data_cp <- data[2:16]
summary(data_cp)
barplot(data$ADRENALGLAND, data$BLOOD, data$BRAIN, xlab(data$Junctions))
ggplot(data) +
geom_col(aes(x = data$Junctions, y=c(data$ADRENALGLAND)))
ggplot(gather(data_cp, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
for (col in 2:ncol(data)) {
hist(data[,col], breaks=10)
}
ggplot(gather(mtcars), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
setwd("~/Documents/Software/gtf_validator_of_cgalcode_prediction/predicted_transcripts_validation_with_reads_alignment_on_specific_junctions/human_junction_exons/junction_validation_human_2020-02-18/analysed")
data = read.csv("nb_reads_mapped_tissue_copy.csv", header=T, sep='\t')
data = read.csv("nb_reads_mapped_tissue_copy.csv", header=T, sep='\t')
View(data)
summary(data)
rowSums(data)
apply(data, 1, sum)
apply(data, 1, sum)
summary(data)
# On crée d'abord une matrice avec 2 lignes et 3 colonnes
data<-matrix(c(1,2,3,4,5,6), nrow=2)
data
# On donne un nom aux lignes et aux colonnes
colnames(data)=c("C1","C2","C3")
rownames(data)=c("L1","L2")
data
# On utilise la fonction apply() pour faire la somme de chaque ligne
apply(data, 1, sum)
# Pour faire la somme de chaque colonne, on remplace 1 par 2
apply(data, 2, sum)
data = read.csv("nb_reads_mapped_tissue_copy.csv", header=T, sep='\t')
data
data = read.table("nb_reads_mapped_tissue_copy.csv", header=T, sep='\t')
data
summary(data)
# On utilise la fonction apply() pour faire la somme de chaque ligne
apply(data, 1, sum)
data
# read file
data = read.table("nb_reads_mapped_tissue_copy.csv", header = T)
# sum by rows
data$sum = apply(data[,2:ncol(data)],1,sum)
summary(data)
# write files
write.csv2(data[data$sum==0,],"null_sum.csv")
write.csv2(data[data$sum>0,],"nonull_sum.csv")
# write files
write.csv2(data[data$sum==0,],"null_sum.csv", sep="\t")
# write files
write.table(data[data$sum==0,],"null_sum.csv", sep="\t")
summary(data)
data
write.table(data[data$sum>0,],"nonull_sum.csv", sep="\t")
# write files
write.table(data[data$sum==0,],"null_sum.csv")
write.table(data[data$sum>0,],"nonull_sum.csv")
data_null("null_sum.csv")
data_null
data_null = read.table("null_sum.csv")
data_null
data_null = read.table("null_sum.csv", header = T)
data_null
summary(data_null)
View(data_null)
# read file
data = read.csv("nb_reads_mapped_tissue_copy.csv", header = T)
data
# read file
data = read.csv("nb_reads_mapped_tissue_copy.csv", header = T, sep='\t')
data
View(data)
# sum by rows
data$sum = apply(data[,2:ncol(data)],1,sum)
data
# write files
write.table(data[data$sum==0,],"null_sum.csv")
write.table(data[data$sum>0,],"nonull_sum.csv")
data_null = read.table("null_sum.csv", header = T)
summary(data_null)
# write files
write.csv(data[data$sum==0,],"null_sum.csv")
# write files
write.table(data[data$sum==0,],"null_sum.csv")
write.table(data[data$sum>0,],"nonull_sum.csv")
# read file
data = read.table("nb_reads_mapped_tissue_copy.csv", header = T, sep='\t')
data
# sum by rows
data$sum = apply(data[,2:ncol(data)],1,sum)
data
# write files
write.table(data[data$sum==0,],"null_sum.csv")
write.table(data[data$sum>0,],"nonull_sum.csv")
data_null = read.table("null_sum.csv", h=T, sep='\t')
summary(data_null)
data_null = read.table("null_sum.csv", h=T, sep=',')
summary(data_null)
data_null = read.table("null_sum.csv", h=T, sep=';')
summary(data_null)
data_null = read.table("null_sum.csv", h=T, sep='\t')
View(data_null)
# write files
write.table(data[data$sum==0,],"null_sum.csv")
write.table(data[data$sum>0,],"nonull_sum.csv")
# write files
write.table(data[data$sum==0,],"null_sum.csv", sep='\t')
write.table(data[data$sum>0,],"nonull_sum.csv", sep='\t')
data_null = read.table("null_sum.csv", h=T, sep='\t')
summary(data_null)
data_null[Junctions]
data_null["Junctions"]
write.table(data_null["Junctions"], "null_list.txt")
data_null["Junctions"][,1]
write.table(data_null["Junctions"][,1], "null_list.txt")
write.table(data_null["Junctions"][,10], "null_list.txt")
write.table(data_null["Junctions"][,1], "null_list.txt")
write.table(data_null["Junctions"][,1], "null_list.txt")
write.table(data_null["Junctions"], "null_list.txt")
write(data_null["Junctions"], "null_list.txt")
write(data_null["Junctions"], "null_list.txt", sep='\n')
write(data_null["Junctions"], "null_list.txt")
write(data_null$Junctions, "null_list.txt")
data_null$Junctions
data_null$Junctions
write.table(data_null$Junctions, "null_list.txt")
data_null_list = data_null$Junctions
?write.table
write.table(data_null$Junctions, "null_list.txt", row.names = F)
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names=F)
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, fileEncoding = )
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, fileEncoding = "?")
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, fileEncoding = "'")
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, fileEncoding = '')
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, fileEncoding = str())
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, fileEncoding = integer()
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, fileEncoding = integer()
write(data_null$Junctions, "null_list.txt")
)?write.table
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, fileEncoding = integer())
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, sep="\t"
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, sep="\t")
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, sep="\t")
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, sep="\n")
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, encoding="UTF-16LE")
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, encoding="UTF-8")
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F, encoding="UTF8")
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write(data_null$Junctions, "null_list.txt")
write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write(as.vector(data_null$Junctions), "null_list.txt")
# read file
data = read.table("nb_reads_mapped_tissue_copy.csv", header = T, sep='\t')
data
summary(data)
# sum by rows
data$sum = apply(data[,2:ncol(data)],1,sum)
summary(data)
# write files
write.table(data[data$sum==0,],"null_sum.csv", sep='\t')
write.table(data[data$sum>0,],"nonull_sum.csv", sep='\t')
data_null = read.table("null_sum.csv", h=T, sep='\t')
data_not_null = read.table("nonull_sum.csv", h=T, sep='\t')
summary(data_null)
summary(data_nonull)
summary(data_not_null)
#write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write(as.vector(data_null$Junctions), "null_list.txt")
write(as.vector(data_not_null$Junctions), "nonull_list.txt")
View(data_not_null)
setwd("~/Documents/Software/gtf_validator_of_cgalcode_prediction/predicted_transcripts_validation_with_reads_alignment_on_specific_junctions/mouse_junction_exons/junction_validation_mouse_2020-02-18/analysed")
# read file
data = read.table("nb_reads_mapped_tissue.csv", header = T, sep='\t')
# read file
data = read.table("nb_reads_mapped_tissue.csv", header = T, sep='\t')
summary(data)
# sum by rows
data$sum = apply(data[,2:ncol(data)],1,sum)
summary(data)
# write files
write.table(data[data$sum==0,],"null_sum.csv", sep='\t')
write.table(data[data$sum>0,],"nonull_sum.csv", sep='\t')
data_null = read.table("null_sum.csv", h=T, sep='\t')
data_not_null = read.table("nonull_sum.csv", h=T, sep='\t')
summary(data_not_null)
#write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write(as.vector(data_null$Junctions), "null_list.txt")
write(as.vector(data_not_null$Junctions), "nonull_list.txt")
setwd("~/Documents/Software/gtf_validator_of_cgalcode_prediction/predicted_transcripts_validation_with_reads_alignment_on_specific_junctions/dog_junction_exons/junction_validation_dog_2020-02-18/analysed")
# read file
data = read.table("nb_reads_mapped_tissue.csv", header = T, sep='\t')
summary(data)
# sum by rows
data$sum = apply(data[,2:ncol(data)],1,sum)
summary(data)
# write files
write.table(data[data$sum==0,],"null_sum.csv", sep='\t')
write.table(data[data$sum>0,],"nonull_sum.csv", sep='\t')
data_null = read.table("null_sum.csv", h=T, sep='\t')
data_not_null = read.table("nonull_sum.csv", h=T, sep='\t')
summary(data_not_null)
#write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write(as.vector(data_null$Junctions), "null_list.txt")
write(as.vector(data_not_null$Junctions), "nonull_list.txt")
setwd("~/Documents/Software/gtf_validator_of_cgalcode_prediction/predicted_transcripts_validation_with_reads_alignment_on_specific_junctions/human_junction_exons/junction_validation_human_2019-12-18/analysed")
# read file
data = read.table("nb_reads_mapped_tissue.csv", header = T, sep='\t')
summary(data)
# sum by rows
data$sum = apply(data[,2:ncol(data)],1,sum)
summary(data)
# write files
write.table(data[data$sum==0,],"null_sum.csv", sep='\t')
write.table(data[data$sum>0,],"nonull_sum.csv", sep='\t')
data_null = read.table("null_sum.csv", h=T, sep='\t')
data_not_null = read.table("nonull_sum.csv", h=T, sep='\t')
summary(data_not_null)
#write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write(as.vector(data_null$Junctions), "null_list.txt")
write(as.vector(data_not_null$Junctions), "nonull_list.txt")
setwd("~/Documents/Software/gtf_validator_of_cgalcode_prediction/predicted_transcripts_validation_with_reads_alignment_on_specific_junctions/mouse_junction_exons/junction_validation_mouse_2019-11-26/analysed")
# read file
data = read.table("nb_reads_mapped_tissue.csv", header = T, sep='\t')
summary(data)
# sum by rows
data$sum = apply(data[,2:ncol(data)],1,sum)
summary(data)
# write files
write.table(data[data$sum==0,],"null_sum.csv", sep='\t')
write.table(data[data$sum>0,],"nonull_sum.csv", sep='\t')
data_null = read.table("null_sum.csv", h=T, sep='\t')
data_not_null = read.table("nonull_sum.csv", h=T, sep='\t')
summary(data_not_null)
#write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write(as.vector(data_null$Junctions), "null_list.txt")
write(as.vector(data_not_null$Junctions), "nonull_list.txt")
setwd("~/Documents/Software/gtf_validator_of_cgalcode_prediction/predicted_transcripts_validation_with_reads_alignment_on_specific_junctions/dog_junction_exons/junction_validation_dog_2020-01-20/analysed")
# read file
data = read.table("nb_reads_mapped_tissue.csv", header = T, sep='\t')
summary(data)
# sum by rows
data$sum = apply(data[,2:ncol(data)],1,sum)
summary(data)
# write files
write.table(data[data$sum==0,],"null_sum.csv", sep='\t')
write.table(data[data$sum>0,],"nonull_sum.csv", sep='\t')
data_null = read.table("null_sum.csv", h=T, sep='\t')
data_not_null = read.table("nonull_sum.csv", h=T, sep='\t')
summary(data_not_null)
#write.table(data_null$Junctions, "null_list.txt", row.names = F, col.names = F)
write(as.vector(data_null$Junctions), "null_list.txt")
write(as.vector(data_not_null$Junctions), "nonull_list.txt")
