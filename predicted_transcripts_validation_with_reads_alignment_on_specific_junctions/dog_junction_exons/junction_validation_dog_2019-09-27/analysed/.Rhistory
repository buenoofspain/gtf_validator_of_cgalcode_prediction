# additional column with HGNC added for merging
gene_dataframe_orgDb$HGNC <- gene_dataframe_orgDb$HGNC_orgDb
# gene dataframe for EnsDb.Hsapiens.v79
gene_dataframe_EnsDb <- ensembldb::select(EnsDb.Hsapiens.v79, keys=ENSEMBL_EnsDb,
columns=c("ENTREZID", "SYMBOL", "GENEBIOTYPE"), keytype="GENEID")
colnames(gene_dataframe_EnsDb) <- c("Ensembl", "Entrez", "HGNC", "GENEBIOTYPE")
colnames(gene_dataframe_EnsDb) <- paste(colnames(gene_dataframe_EnsDb), "EnsDb", sep = "_")
# additional column with HGNC added for merging & keeping one copy of it in the merged dataframe
gene_dataframe_EnsDb$HGNC <- gene_dataframe_EnsDb$HGNC_EnsDb
# merging the two dataframes by HGNC
library(dplyr)
# merging the two dataframes by HGNC
library(dplyr)
#install.packages('dplyr')
gene_dataframe <- full_join(gene_dataframe_EnsDb, gene_dataframe_orgDb, by = "HGNC")
gene_dataframe <- gene_dataframe[, -5]
# making a dataframe with additional column for merging & keeping one copy in the merged dataframe
ENTREZID_TxDb_df <- data.frame(ENTREZID = as.character(ENTREZID_TxDb), Entrez_TxDb = ENTREZID_TxDb)
gene_dataframe <- left_join(gene_dataframe, ENTREZID_TxDb_df, by = c("Entrez_orgDb" = "ENTREZID"))
# calculating percentages of gene biotypes
for (i in 1:length(colnames(gene_dataframe))){
key = colnames(gene_dataframe)[i]
# remove duplicate and NA plots
gene_dataframe_subs <- gene_dataframe[!duplicated(gene_dataframe[, key]), c(key, "GENEBIOTYPE_EnsDb")]
gene_dataframe_subs <- gene_dataframe_subs[!is.na(gene_dataframe_subs[, key]), ]
cat("\nKey:", key, "has", nrow(gene_dataframe_subs), "unique rows without NAs.\nOf these,",
sum(is.na(gene_dataframe_subs$GENEBIOTYPE_EnsDb)), "don't have a gene biotype annotation\n")
if (i == 1){
genebiotypes_table <- as.data.frame(table(gene_dataframe_subs$GENEBIOTYPE_EnsDb))
genebiotypes_table <- rbind(genebiotypes_table,
data.frame(Var1 = "NA",
Freq = sum(is.na(gene_dataframe_subs$GENEBIOTYPE_EnsDb))))
genebiotypes_table$percent <- round(genebiotypes_table$Freq /
sum(genebiotypes_table$Freq) * 100, digits = 4)
} else {
genebiotypes_table_pre <- as.data.frame(table(gene_dataframe_subs$GENEBIOTYPE_EnsDb))
genebiotypes_table_pre <- rbind(genebiotypes_table_pre,
data.frame(Var1 = "NA",
Freq = sum(is.na(gene_dataframe_subs$GENEBIOTYPE_EnsDb))))
genebiotypes_table_pre$percent <- round(genebiotypes_table_pre$Freq /
sum(genebiotypes_table_pre$Freq) * 100, digits = 4)
genebiotypes_table <- full_join(genebiotypes_table, genebiotypes_table_pre, by = "Var1")
}
}
# create unique colnames
colnames(genebiotypes_table) <- make.unique(c("Key", rep(colnames(gene_dataframe), each = 2)))
genebiotypes_table <- genebiotypes_table[, -c(8, 9)]
# order by percentage of Ensembl EnsDb
genebiotypes_table <- genebiotypes_table[order(genebiotypes_table$Ensembl_EnsDb.1, decreasing = TRUE), ]
genebiotypes_table_protein_coding <- genebiotypes_table[
which(genebiotypes_table$Key %in% c("protein_coding", "NA")), ]
genebiotypes_table_count <- genebiotypes_table_protein_coding[1, c(1, grep(".1", colnames(genebiotypes_table_protein_coding)) - 1)]
library(tidyr)
library(tidyr)
genebiotypes_table_gather <- genebiotypes_table_count %>%
gather(Key, Count, Ensembl_EnsDb:Entrez_TxDb)
colnames(genebiotypes_table_gather)[2] <- "DB"
# plot
bp <- ggplot(genebiotypes_table_gather[, -1], aes(x = factor(DB), y = Count, label = Count)) +
geom_bar(stat = "identity", fill = "maroon") + my_theme()
# plot
bp <- ggplot(genebiotypes_table_gather[, -1], aes(x = factor(DB), y = Count, label = Count)) +
geom_bar(stat = "identity", fill = "maroon") + my_theme()
bp + labs(title = "Number of protein coding genes in databases", y = "Count", x = "") +
geom_text(size = 6, vjust = 1.5)
# plot
bp <- gplot(genebiotypes_table_gather[, -1], aes(x = factor(DB), y = Count, label = Count)) +
geom_bar(stat = "identity", fill = "maroon") + my_theme()
# plot
bp <- ggplot(genebiotypes_table_gather[, -1], aes(x = factor(DB), y = Count, label = Count)) +
geom_bar(stat = "identity", fill = "maroon") + my_theme()
bp + labs(title = "Number of protein coding genes in databases", y = "Count", x = "") +
geom_text(size = 6, vjust = 1.5)
genebiotypes_table_percent <- genebiotypes_table_protein_coding[, c(1, grep(".1", colnames(genebiotypes_table_protein_coding)))]
library(tidyr)
genebiotypes_table_gather <- genebiotypes_table_percent %>%
gather(Key, Percent, Ensembl_EnsDb.1:Entrez_TxDb.1)
colnames(genebiotypes_table_gather)[2] <- "DB"
genebiotypes_table_gather$DB <- gsub(".1", "", genebiotypes_table_gather$DB)
# plot
bp <- ggplot(genebiotypes_table_gather, aes(x = "", y = Percent, fill = Key)) +
geom_bar(width = 1, stat = "identity") + theme_minimal()
pie <- bp + coord_polar("y", start = 0) +
ggtitle("Percentage of protein coding genes in gene databases") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 8)
)
pie + facet_wrap(~DB, ncol = 4)
genebiotypes_table_percent <- genebiotypes_table[, c(1, grep(".1", colnames(genebiotypes_table)))]
pie + facet_wrap(~DB, ncol = 4)
pie + facet_wrap(~DB, ncol = 4)
genebiotypes_table_percent <- genebiotypes_table[, c(1, grep(".1", colnames(genebiotypes_table)))]
genebiotypes_table_percent$Key <- factor(genebiotypes_table_percent$Key,
levels = paste0(genebiotypes_table_percent$Key))
# gather dataframe for plotting
library(tidyr)
genebiotypes_table_gather <- genebiotypes_table_percent %>%
gather(Key, Percent, Ensembl_EnsDb.1:Entrez_TxDb.1)
colnames(genebiotypes_table_gather)[2] <- "DB"
genebiotypes_table_gather$DB <- gsub(".1", "", genebiotypes_table_gather$DB)
# plot
bp <- ggplot(genebiotypes_table_gather, aes(x = "", y = Percent, fill = Key)) +
geom_bar(width = 1, stat = "identity") + theme_minimal()
pie <- bp + coord_polar("y", start = 0) +
ggtitle("Percentage of gene biotypes in gene databases") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size = 14, face = "bold"),
legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 8)
)
pie + facet_wrap(~DB, ncol = 4)
library(AnnotationDbi)
library(org.Hs.eg.db)
ENTREZID_org <- keys(org.Hs.eg.db, keytype = "ENTREZID")
ENSEMBL_org <- keys(org.Hs.eg.db, keytype = "ENSEMBL")
# Summarize number of transcripts per gene Entrez ID
org_trans_entrez <- AnnotationDbi::select(org.Hs.eg.db, keys = ENTREZID_org, columns = c("ENSEMBLTRANS"), keytype = "ENTREZID")
org_transcript_num_table_entrez <- as.data.frame(table(org_trans_entrez$ENTREZID))
colnames(org_transcript_num_table_entrez) <- c("Entrez", "orgDb")
# Summarize number of transcripts per gene Ensembl ID
org_trans_ensembl <- AnnotationDbi::select(org.Hs.eg.db, keys = ENSEMBL_org, columns = c("ENSEMBLTRANS"), keytype = "ENSEMBL")
org_transcript_num_table_ensembl <- as.data.frame(table(org_trans_ensembl$ENSEMBL))
colnames(org_transcript_num_table_ensembl) <- c("Ensembl", "orgDb")
# how many NAs are in each column?
sapply(org_trans_entrez, function(x) sum(is.na(x)))
sapply(org_trans_ensembl, function(x) sum(is.na(x)))
head(org_trans_entrez)
head(org_trans_ensembl)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
ENTREZID_TxDb <- keys(TxDb.Hsapiens.UCSC.hg38.knownGene, keytype = "GENEID")
TxDb_trans <- AnnotationDbi::select(TxDb.Hsapiens.UCSC.hg38.knownGene, keys = ENTREZID_TxDb, columns = c("TXID"), keytype = "GENEID")
# Summarize number of transcripts per gene Entrez ID
TxDb_transcript_num_table_entrez <- as.data.frame(table(TxDb_trans$GENEID))
colnames(TxDb_transcript_num_table_entrez) <- c("Entrez", "TxDb")
# how many NAs are in each column?
sapply(TxDb_trans, function(x) sum(is.na(x)))
head(TxDb_trans)
library(EnsDb.Hsapiens.v79)
ENSEMBL_EnsDb <- keys(EnsDb.Hsapiens.v79, keytype = "GENEID")
ENTREZ_EnsDb <- keys(EnsDb.Hsapiens.v79, keytype = "ENTREZID")
EnsDb_trans_ensembl <- ensembldb::select(EnsDb.Hsapiens.v79, keys = ENSEMBL_EnsDb, columns = c("TXID"), keytype = "GENEID")
EnsDb_trans_entrez <- ensembldb::select(EnsDb.Hsapiens.v79, keys = ENTREZ_EnsDb, columns = c("TXID"), keytype = "ENTREZID")
EnsDb_trans_entrez <- ensembldb::select(EnsDb.Hsapiens.v79, keys = ENTREZ_EnsDb, columns = c("TXID"), keytype = "ENTREZID")
# somehow there are empty fields in the Entrez ID column, replacing them with NA
EnsDb_trans_entrez[EnsDb_trans_entrez ==  ""] <- NA
# how many NAs are in each column?
sapply(EnsDb_trans_entrez, function(x) sum(is.na(x)))
# and removing NA rows
EnsDb_trans_entrez <- EnsDb_trans_entrez[!is.na(EnsDb_trans_entrez$ENTREZID), ]
# order by Entrez ID to compare with other databases
EnsDb_trans_entrez <- EnsDb_trans_entrez[order(EnsDb_trans_entrez$ENTREZID),]
head(EnsDb_trans_ensembl)
head(EnsDb_trans_entrez)
# Summarize number of transcripts per gene Entrez ID
EnsDb_transcript_num_table_entrez <- as.data.frame(table(EnsDb_trans_entrez$ENTREZID))
colnames(EnsDb_transcript_num_table_entrez) <- c("Entrez", "EnsDb")
# Summarize number of transcripts per gene Ensembl ID
EnsDb_transcript_num_table_ensembl <- as.data.frame(table(EnsDb_trans_ensembl$GENEID))
colnames(EnsDb_transcript_num_table_ensembl) <- c("Ensembl", "EnsDb")
# In the Entrez column, there are some with multiple entries
# divide entries with multiple gene names into one row per gene/ entry
head(EnsDb_transcript_num_table_entrez[grep(";", EnsDb_transcript_num_table_entrez$Entrez), ])
library(splitstackshape)
out <- as.data.frame(cSplit(EnsDb_transcript_num_table_entrez, splitCols = "Entrez", sep = ";", direction = "long"), stringsAsFactors = FALSE)
out$Entrez <- as.character(out$Entrez)
# remove duplicates and take the mean
library(plyr)
EnsDb_transcript_num_table_entrez <- ddply(out, "Entrez", numcolwise(mean))
# merging datasets by Entrez ID
library(dplyr)
transcript_num_table_entrez <- full_join(org_transcript_num_table_entrez, TxDb_transcript_num_table_entrez, by = "Entrez")
transcript_num_table_entrez <- full_join(transcript_num_table_entrez, EnsDb_transcript_num_table_entrez, by = "Entrez")
# gather for plotting
library(tidyr)
transcript_num_table_gather_entrez <- transcript_num_table_entrez %>%
gather(DB, count, orgDb:EnsDb)
# How many counts are NA?
sapply(transcript_num_table_gather_entrez, function(x) sum(is.na(x)))
# removing rows with NA counts
transcript_num_table_gather_entrez <- transcript_num_table_gather_entrez[!is.na(transcript_num_table_gather_entrez$count), ]
# because there are only a handful of genes with many transcripts, they can't be plotted together with genes with few transcripts
# separating them in high and low
transcript_num_table_gather_entrez$group <- ifelse(transcript_num_table_gather_entrez$count > 25, "high", "low")
# setting factor levels
f = c("low", "high")
transcript_num_table_gather_entrez <- within(transcript_num_table_gather_entrez, group <- factor(group, levels = f))
# setting my custom theme of choice
library(ggplot2)
my_theme <- function(base_size = 12, base_family = "sans"){
theme_grey(base_size = base_size, base_family = base_family) +
theme(
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "aliceblue"),
strip.background = element_rect(fill = "lightgrey", color = "grey", size = 1),
strip.text = element_text(face = "bold", size = 12, colour = "navy"),
legend.position = "bottom",
panel.margin = unit(.05, "lines"),
panel.border = element_rect(color = "grey", fill = NA, size = 0.5)
)
}
p <- ggplot(data = transcript_num_table_gather_entrez, aes(as.numeric(count))) +
geom_histogram(fill = "deepskyblue4") +
my_theme() +
labs(title = "Histogram of number of transcripts per gene (Entrez ID)",
x = "Number of transcripts per gene", y = "Count") +
facet_wrap(DB ~ group, scales = "free", ncol = 2)
ann_text_entrez <- data.frame(x = c(20, 300, 20, 100, 20, 100),
y = c(4000, 350, 40000, 15, 5000, 280),
group = rep(c("low", "high"), 3),
DB = rep(c("EnsDb", "orgDb", "TxDb"), each = 2),
labs = c(paste(length(which(transcript_num_table_gather_entrez$group ==  "low" &
transcript_num_table_gather_entrez$DB ==  "EnsDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "high" &
transcript_num_table_gather_entrez$DB ==  "EnsDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "low" &
transcript_num_table_gather_entrez$DB ==  "orgDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "high" &
transcript_num_table_gather_entrez$DB ==  "orgDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "low" &
transcript_num_table_gather_entrez$DB ==  "TxDb"))),
paste(length(which(transcript_num_table_gather_entrez$group ==  "high" &
transcript_num_table_gather_entrez$DB ==  "TxDb")))))
p + geom_text(data = ann_text_entrez, aes(x, y, label = labs, group = NULL), size = 8)
# merging datasets by Ensembl ID
transcript_num_table_ensembl <- full_join(org_transcript_num_table_ensembl, EnsDb_transcript_num_table_ensembl, by = "Ensembl")
# gather for plotting
transcript_num_table_gather_ensembl <- transcript_num_table_ensembl %>%
gather(DB, count, orgDb:EnsDb)
# How many counts are NA?
sapply(transcript_num_table_gather_ensembl, function(x) sum(is.na(x)))
# removing rows with NA counts
transcript_num_table_gather_ensembl <- transcript_num_table_gather_ensembl[!is.na(transcript_num_table_gather_ensembl$count), ]
# because there are only a handful of genes with many transcripts, they can't be plotted together with genes with few transcripts
# separating them in high and low
transcript_num_table_gather_ensembl$group <- ifelse(transcript_num_table_gather_ensembl$count > 25, "high", "low")
# setting factor levels
f = c("low", "high")
transcript_num_table_gather_ensembl <- within(transcript_num_table_gather_ensembl, group <- factor(group, levels = f))
p <- ggplot(data = transcript_num_table_gather_ensembl, aes(as.numeric(count))) +
geom_histogram(fill = "deepskyblue4") +
my_theme() +
labs(title = "Histogram of number of transcripts per gene (Ensembl ID)",
x = "Number of transcripts per gene", y = "Count") +
facet_wrap(DB ~ group, scales = "free", ncol = 2)
ann_text_ensembl <- data.frame(x = c(10, 75, 10, 100),
y = c(30000, 100, 15000, 100),
group = rep(c("low", "high"), 4),
DB = rep(c("EnsDb", "orgDb"), each = 2),
labs = c(paste(length(which(transcript_num_table_gather_ensembl$group ==  "low" &
transcript_num_table_gather_ensembl$DB ==  "EnsDb"))),
paste(length(which(transcript_num_table_gather_ensembl$group ==  "high" &
transcript_num_table_gather_ensembl$DB ==  "EnsDb"))),
paste(length(which(transcript_num_table_gather_ensembl$group ==  "low" &
transcript_num_table_gather_ensembl$DB ==  "orgDb"))),
paste(length(which(transcript_num_table_gather_ensembl$group ==  "high" &
transcript_num_table_gather_ensembl$DB ==  "orgDb")))))
p + geom_text(data = ann_text_ensembl, aes(x, y, label = labs, group = NULL), size = 8)
# for comparison replacing NAs with 0
transcript_num_table_ensembl_NAtozero <- transcript_num_table_ensembl
transcript_num_table_ensembl_NAtozero[is.na(transcript_num_table_ensembl_NAtozero)] <- 0
transcript_num_table_entrez_NAtozero <- transcript_num_table_entrez
transcript_num_table_entrez_NAtozero[is.na(transcript_num_table_entrez_NAtozero)] <- 0
library(ggrepel)
p1 <- ggplot(transcript_num_table_ensembl_NAtozero, aes(x = orgDb, y = EnsDb)) +
geom_abline(linetype="dashed") +
geom_point(colour = "deepskyblue4", alpha = 0.3) +
my_theme() +
geom_smooth(size = 1, color = "black") +            # Add a loess smoothed fit curve with confidence region
labs(title = "Number of transcripts per Ensembl ID") +
geom_text_repel(data = subset(transcript_num_table_ensembl_NAtozero, orgDb > 140 | EnsDb > 150), aes(label = Ensembl))
p2 <- ggplot(transcript_num_table_entrez_NAtozero, aes(x = orgDb, y = TxDb)) +
geom_abline(linetype="dashed") +
geom_point(colour = "deepskyblue4", alpha = 0.3) +
my_theme() +
geom_smooth(size = 1, color = "black") +
labs(title = "Number of transcripts per Entrez ID") +
geom_text_repel(data = subset(transcript_num_table_entrez_NAtozero, orgDb > 100 | TxDb > 200), aes(label = Entrez))
p3 <- ggplot(transcript_num_table_entrez_NAtozero, aes(x = orgDb, y = EnsDb)) +
geom_abline(linetype="dashed") +
geom_point(colour = "deepskyblue4", alpha = 0.3) +
my_theme() +
geom_smooth(size = 1, color = "black") +
labs(title = "Number of transcripts per Entrez ID") +
geom_text_repel(data = subset(transcript_num_table_entrez_NAtozero, orgDb > 100 | EnsDb > 900), aes(label = Entrez))
p4 <- ggplot(transcript_num_table_entrez_NAtozero, aes(x = TxDb, y = EnsDb)) +
geom_abline(linetype="dashed") +
geom_point(colour = "deepskyblue4", alpha = 0.3) +
my_theme() +
geom_smooth(size = 1, color = "black") +
labs(title = "Number of transcripts per Entrez ID") +
geom_text_repel(data = subset(transcript_num_table_entrez_NAtozero, TxDb > 150 | EnsDb > 900), aes(label = Entrez))
library(gridExtra)
library(grid)
library(gridExtra)
library(grid)
install.packages("prettyR")
install.packages('IRkernel',dep=TRUE)
IRkernel::installspec()  # to register the kernel in the current R installation
install.packages("IRkernel", dep = TRUE)
install.packages("IRkernel", dep = TRUE)
install.packages("IRkernel", dep = TRUE)
install.packages('IRkernel',dep=TRUE)
IRkernel::installspec()  # to register the kernel in the current R installation
install.packages('devtools',dep=TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
2+2
x
x=1
x
x = x+10
x
x = x+10
x
x = x+10
x
x = x+10
x
x = x+10
x
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
x=1
x
x = x+10
x
x = x+10
x
hist(rnorm(1000))
hist(rnorm(100, mean = 2, sd = .2))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
x=1
x
x = x+10
x
hist(rnorm(1000))
hist(rnorm(100, mean = 2, sd = .2))
---
title: "Mon premier document"
output:
html_document: default
pdf_document: default
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## Ma propre section
```{r}
2+2
x=1
x
```
```{r}
x = x+10
x
```
```{r}
hist(rnorm(1000))
```
```{r}
hist(rnorm(100, mean = 2, sd = .2))
```
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
x=1
x
x = x+10
x
hist(rnorm(1000))
hist(rnorm(100, mean = 2, sd = .2))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
2+2
x=1
x
x = x+10
x
hist(rnorm(1000))
hist(rnorm(100, mean = 2, sd = .2))
unlink('Documents/these_nguillaudeux/Archives_docs/Formations/MOOC_reproductibilite/mooc-rr/module2/docu1_cache', recursive = TRUE)
# Install core Bioconductor packages
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
# install biomartr 0.8.0
install.packages("biomartr", dependencies = TRUE)
# Install core Bioconductor packages
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
# Install package dependencies
BiocManager::install("Biostrings", version = "3.8")
BiocManager::install("biomaRt", version = "3.8")
BiocManager::install("biomaRt", version = "3.8")
data_url = "https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/HistData/Wheat.csv"
data_url
data_url = "https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/HistData/Wheat.csv"
data_url = read.csv('/home/niguilla/Documents/these_nguillaudeux/Archives_docs/Formations/MOOC_reproductibilite/mooc-rr/mooc-rr/module3/eval_pairs/Wheat.csv')
data_url = read.csv('/home/niguilla/Documents/these_nguillaudeux/Archives_docs/Formations/MOOC_reproductibilite/mooc-rr/mooc-rr/eval_pairs/Wheat.csv')
data_url
Wheat = read.csv('/home/niguilla/Documents/these_nguillaudeux/Archives_docs/Formations/MOOC_reproductibilite/mooc-rr/mooc-rr/eval_pairs/Wheat.csv')
Wheat
data(Wheat)
# convenience function to fill area under a curve down to a minimum value
fillpoly <- function(x,y, low=min(y),  ...) {
n <- length(x)
polygon( c(x, x[n], x[1]), c(y, low, low), ...)
}
# For best results, this graph should be viewed with width ~ 2 * height
# Note use of type='s' to plot a step function for Wheat
#   and panel.first to provide a background grid()
#     The curve for Wages is plotted after the polygon below it is filled
with(Wheat, {
plot(Year, Wheat, type="s", ylim=c(0,105),
ylab="Price of the Quarter of Wheat (shillings)",
panel.first=grid(col=gray(.9), lty=1))
fillpoly(Year, Wages, low=0, col="lightskyblue", border=NA)
lines(Year, Wages, lwd=3, col="red")
})
setwd("~/Documents/Software/gtf_validator_of_cgalcode_prediction/examples/validation_part2/dog_junction_exons/junction_validation_dog_2019-09-27/analysed")
library(ggplot2)
library(raster)
library(tidyr)
install.packages(Hmisc)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
# Lecture du tableau de l'ensemble des blocs d'exons
data <- read.table("nb_reads_mapped_tissue.csv", header = TRUE, sep = "\t", dec=',')
head(data)
summary(data)
data[1]
length(data)
cbind(data, total = rowSums(data[2:16]))
hist(data[2:16])
data_cp <- data[2:16]
summary(data_cp)
barplot(data$ADRENALGLAND, data$BLOOD, data$BRAIN, xlab(data$Junctions))
ggplot(data) +
geom_col(aes(x = data$Junctions, y=c(data$ADRENALGLAND)))
ggplot(gather(data_cp, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
for (col in 2:ncol(data)) {
hist(data[,col], breaks=10)
}
# Lecture du tableau de l'ensemble des blocs d'exons
data <- read.table("nb_reads_mapped_tissue.csv", header = TRUE, sep = "\t", dec=',')
head(data)
summary(data)
data[1]
length(data)
cbind(data, total = rowSums(data[2:16]))
hist(data[2:16])
data_cp <- data[2:16]
summary(data_cp)
barplot(data$ADRENALGLAND, data$BLOOD, data$BRAIN, xlab(data$Junctions))
ggplot(data) +
geom_col(aes(x = data$Junctions, y=c(data$ADRENALGLAND)))
ggplot(gather(data_cp, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
for (col in 2:ncol(data)) {
hist(data[,col], breaks=10)
}
ggplot(gather(mtcars), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
install.packages("Hmisc")
